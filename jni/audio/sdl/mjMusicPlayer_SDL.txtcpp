namespace mjEngine{

mjMusicPlayer::mjMusicPlayer()
{
    
    currentMusic = NULL;
}

void mjMusicPlayer::Load(mjSoundResource* soundRes, int sampleNumber)
{
// This is far from ideal because it keeps the whole file in memory
// but it seems like Mix_LoadMUS_RW does not exist anymore :/

    if (!soundRes->memRWop)
    {
        soundRes->memRWop = SDL_RWFromConstMem(soundRes->buffer, soundRes->bufferSize);
    }

    currentMusic = Mix_LoadMUS_RW(soundRes->memRWop, 0); // 0 = don't free the buffer for me
    if (currentMusic == NULL)
    {
        LOGI("Error while loading music\n");
    }
}

void mjMusicPlayer::Play()
{
    if (currentMusic)
    {
        channel = Mix_PlayMusic(currentMusic, loops);
    }
}
void mjMusicPlayer::Play(int sampleIndex)
{
    Play();
}
void mjMusicPlayer::Pause()
{
    Mix_PauseMusic();
}
void mjMusicPlayer::Resume()
{
    Mix_ResumeMusic();
}

void mjMusicPlayer::Rewind()
{
    Mix_RewindMusic(); //FIXME: does this achieve what we need? (stop + go back to start) or should I instead re-load the music..?
}

void mjMusicPlayer::Free()
{
    Mix_FreeMusic(currentMusic);
    currentMusic = NULL;
}

mjMusicPlayer::~mjMusicPlayer()
{
    //dtor
    Free();
}

}
